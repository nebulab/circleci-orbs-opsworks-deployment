executor: default

parameters:
  app_id:
    type: string
    description: The ID of the OpsWorks app to deploy.
  stack_id:
    type: string
    description: The ID of the OpsWorks stack to deploy.
  github_repo:
    type: string
    description: The path of your GitHub repo (org/name).
  slack_hook_url:
    type: string
    description: The URL of the Slack hook to notify.

steps:
  - checkout
  - restore_cache:
      key: last-head
  - deploy:
      name: Deploy Staging
      command: |
        aws opsworks update-app --app-id <<parameters.app_id>> --app-source Revision=$CIRCLE_SHA1
        aws opsworks wait deployment-successful --deployment-ids `aws opsworks create-deployment --stack-id <<parameters.stack_id>> --app-id <<parameters.app_id>> --command "{\"Name\":\"deploy\"}" | awk '{print $2}' | sed 's/"//g'`
  - run:
      name: Notify Staging Deploy
      command: |
        cat \<<- EOF > notification.json
          {
            "attachments": [{
              "title": "Deploy",
              "color": "good",
              "text": "The application has been deployed to *staging*.\nApproving the workflow will deploy to *production*.\nChanges are from last *production* deploy.",
              "fields": [{
                "title": "Staging Ref",
                "short": true,
                "value": "<https://github.com/<<parameters.github_repo>>/commit/$CIRCLE_SHA1|`echo $CIRCLE_SHA1 | cut -c1-8`>"
              }, {
                  "title": "Production Ref",
                  "short": true,
                  "value": "<https://github.com/<<parameters.github_repo>>/commit/`cat .last_deploy`|`cat .last_deploy | cut -c1-8`>"
                }
              ],
              "actions": [{
                "type": "button",
                "text": "See Changes :octocat:",
                "style": "primary",
                "url": "https://github.com/<<parameters.github_repo>>/compare/`cat .last_deploy`...$CIRCLE_SHA1"
              }, {
                  "type": "button",
                  "style": "danger",
                  "text": "Approve Workflow :shipit:",
                  "url": "https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID"
                }
              ]
            }]
          }
        EOF
        curl -X POST -H 'Content-type: application/json' --data '@notification.json' <<parameters.slack_hook_url>>
      when: on_success
  - run:
      name: Notify Failed Staging Deploy
      command: |
        cat \<<- EOF > notification.json

          {
            "attachments": [{
              "title": "Deploy",
              "color": "danger",
              "text": "<https://github.com/<<parameters.github_repo>>/commit/$CIRCLE_SHA1|'`echo $CIRCLE_SHA1 | cut -c1-8`'> failed being deployed to *staging*!"
            }]
          }
        EOF
        curl -X POST -H 'Content-type: application/json' --data '@notification.json' <<parameters.slack_hook_url>>
      when: on_fail
